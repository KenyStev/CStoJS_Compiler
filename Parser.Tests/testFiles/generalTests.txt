// Using directives
using System;
using System.Linq;

interface Test
{
    
}

enum EnumTest
{
    
}

// Nested namespaces
namespace X
{
    namespace A
    {
        namespace B
        {
            namespace C
            {
                using System.Console;
            }
        }
    }

    namespace D
    {
        class SomeClass
        {
            private int x;
            private bool[,] y;

            protected static int counter;

            protected SomeClass()
            {
                
            }

            public static void main()
            {
                
            }

            private abstract int test(float x, bool what);


            private static int Z = 1;

            SomeClass(int a, int b)
            {
                
            }
        }

        private class AnotherClass
        {
            
        }
    }
}

namespace Y
{
    enum Test
    {
        A, B, C, D
    }

    private enum Test2
    {
        A = 1, B, C = 4,
    }
}

namespace Z
{
    public enum Test
    {
        
    }

    interface ITest : IInterface, ISomething, IDontKnow
    {
        string doSomething(string message);
        void sayHi();
        bool truthy();
        float pi();
        int sum(int a, int b);
        SomeClass hey();
    }

    interface ITest2
    {
        void what();
    }

    interface ITest3
    {

    }

    namespace A
    {
        
    }
}

enum What
{
    
}

abstract class Test : SomeClass2, Hey, System.Some.Thing
{
    /*
     * Wild comment block has appeared!
     */

    private static int x, y, z;

    Test() 
    {
        
    }

    public static System.Object[][] Function()
    {
        
    }

    private Test(int a, string str)
    {
        while (true)
        {
            Lol que = new Lol[6][];
            Lol que = new Lol[][]{};
            Lol que = new Lol[,,,]{};

            hola = "adios";

            hola[2] = "adios";
        }

        for (int x = 0, j = 1; true;)
        {
            break;
            continue;
        }

        foreach (int x in numbers)
        {
            break;
            continue;
        }

        int x, y, z, i;

        //Console.WriteLine("Hello!");
    }

    public static void Something()
    {
        int[] list1 = new int[4] { 1, 2, 3, 4};
        int[] list2 = new int[4] { 5, 6, 7, 8};
        int[] list3 = new int[4] { 1, 3, 2, 1 };
        int[] list4 = new int[4] { 5, 4, 3, 2 };

        int[][] lists = new int[][] {  list1 ,  list2 ,  list3 ,  list4  };
    }

    public abstract int[][] SomethingAbstract();
}

namespace Compiler
{
    public class Parser
    {
        /*unary-expression:
            | expression-unary-operator unary-expression
            | '(' type ')' primary-expression
            | primary-expression */
        private void unary_expression()
        {
            TokenType[] nuevo = { TokenType.RW_NEW , TokenType.ID,
                TokenType.PUNT_PAREN_OPEN, TokenType.RW_THIS
            };
            printIfDebug("unary_expression");
            if(pass(unaryOperatorOptions))
            {
                consumeToken();
                unary_expression();
            }else if(pass(TokenType.PUNT_PAREN_OPEN))
            {
                addLookAhead(lexer.GetNextToken());
                addLookAhead(lexer.GetNextToken());
                if (typesOptions.Contains(look_ahead[0].type) && (look_ahead[1].type == TokenType.PUNT_PAREN_CLOSE
                || look_ahead[1].type == TokenType.PUNT_ACCESOR))
                {
                    consumeToken();
                    if (!pass(typesOptions))
                        throwError("type expected");
                    types();

                    if (!pass(TokenType.PUNT_PAREN_CLOSE))
                        throwError("')' expected");
                    consumeToken();
                    primary_expression();
                }
                else
                {
                    primary_expression();
                }
            }else if(pass(nuevo,literalOptions))
            {
                primary_expression();
            }else{
                throwError("unary-operator, casting or primary-expression expected");
            }
        }

        /*primary-expression:
            | "new" instance-expression primary-expression-p
            | literal primary-expression-p
            | identifier primary-expression-p
            | '(' expression ')' primary-expression-p
            | "this" primary-expression-p */
        private void primary_expression()
        {
            printIfDebug("primary_expression");
            if(pass(TokenType.RW_NEW))
            {
                consumeToken();
                instance_expression();
                if(pass(primaryOptionsPrime))
                    primary_expression_p();
            }else if(pass(literalOptions))
            {
                consumeToken();
                if(pass(primaryOptionsPrime))
                    primary_expression_p();
            }else if(pass(TokenType.ID))
            {
                consumeToken();
                if(pass(primaryOptionsPrime))
                    primary_expression_p();
            }else if(pass(TokenType.PUNT_PAREN_OPEN))
            {
                consumeToken();
                expression();
                if(pass(primaryOptionsPrime))
                    primary_expression_p();
                if(!pass(TokenType.PUNT_PAREN_CLOSE))
                    throwError(") expected");
                consumeToken();
            }else if(pass(TokenType.RW_THIS))
            {
                consumeToken();
                if(pass(primaryOptionsPrime))
                    primary_expression_p();
            }else{
                throwError("new, literal, identifier, '(' or \"this\" expected");
            }
        }

        /*primary-expression-p:
            | '.' identifier primary-expression-p
            | optional-funct-or-array-call primary-expression-p
            | increment-decrement primary-expression-p 
            | EPSILON  */
        private void primary_expression_p()
        {
            printIfDebug("primary_expression_p");
            if(pass(TokenType.PUNT_ACCESOR))
            {
                consumeToken();
                if(!pass(TokenType.ID))
                    throwError("identifier expected");
                consumeToken();
                primary_expression_p();
            }else if(pass(TokenType.PUNT_PAREN_OPEN,TokenType.PUNT_SQUARE_BRACKET_OPEN))
            {
                optional_funct_or_array_call();
                primary_expression_p();
            }else if(pass(TokenType.OP_PLUS_PLUS,TokenType.OP_MINUS_MINUS))
            {
                consumeToken();
                primary_expression_p();
            }else{
                //EPSILON
            }
        }

        /*optional-funct-or-array-call:
            | '(' argument-list ')'
            | optional-array-access-list
            | EPSILON */
        private void optional_funct_or_array_call()
        {
            printIfDebug("optional_funct_or_array_call");
            if(pass(TokenType.PUNT_PAREN_OPEN))
            {
                consumeToken();
                argument_list();
                if(!pass(TokenType.PUNT_PAREN_CLOSE))
                    throwError(") expected");
                consumeToken();
            }else if(pass(TokenType.PUNT_SQUARE_BRACKET_OPEN))
            {
                optional_array_access_list();
            }else{
                //EPSILON
            }
        }

        /*optional-array-access-list:
            | '[' expression-list ']' optional-array-access-list
            | EPSILON */
        private void optional_array_access_list()
        {
            printIfDebug("optional_array_access_list");
            if(pass(TokenType.PUNT_SQUARE_BRACKET_OPEN))
            {
                consumeToken();
                expression_list();
                if(!pass(TokenType.PUNT_SQUARE_BRACKET_CLOSE))
                    throwError("] expected");
                consumeToken();
                optional_array_access_list();
            }else{
                //EPSILON
            }
        }

        /*expression-list:
	        | expression optional-expression-list */
        private void expression_list()
        {
            printIfDebug("expression_list");
            expression();
            optional_expression_list();
        }

        /*optional-expression-list:
            | ',' expression-list
            | EPSILON */
        private void optional_expression_list()
        {
            printIfDebug("optional_expression_list");
            if(pass(TokenType.PUNT_COMMA))
            {
                consumeToken();
                expression_list();
            }else{
                //EPSILON
            }
        }

        /*instance-expression:
	        | type instance-expression-factorized */
        private void instance_expression()
        {
            printIfDebug("instance_expression");
            if(!pass(typesOptions))
                throwError("type expected");
            if(pass(TokenType.ID))
            {
                qualified_identifier();
            }else{
                consumeToken();
            }
            instance_expression_factorized();
        }

        /*instance-expression-factorized:
            | '[' instance-expression-factorized-p 
            | '(' argument-list ')' */
        private void instance_expression_factorized()
        {
            printIfDebug("instance_expression_factorized");
            if (pass(TokenType.PUNT_SQUARE_BRACKET_OPEN))
            {
                consumeToken();
                instance_expression_factorized_p();
            }else if (pass(TokenType.PUNT_PAREN_OPEN))
            {
                consumeToken();
                argument_list();

                if (!pass(TokenType.PUNT_PAREN_CLOSE))
                    throwError("')' expected");
                consumeToken();
            }
            else
            {
                throwError("'[' or '(' expected");
            }
        }

        /*instance-expression-factorized-p:
            | expression-list ']' optional-rank-specifier-list optional-array-initializer
            | rank-specifier-list optional-array-initializer */
        private void instance_expression_factorized_p()
        {
            printIfDebug("instance_expression_factorized_p");
            if(pass(expressionOptions()))
            {
                expression_list();
                if (!pass(TokenType.PUNT_SQUARE_BRACKET_CLOSE))
                    throwError("']' expected");
                consumeToken();

                optional_rank_specifier_list();
                optional_array_initializer();
            }else if (pass(TokenType.PUNT_COMMA,TokenType.PUNT_SQUARE_BRACKET_CLOSE))
            {
                rank_specifier_list();
                array_initializer();
            }
            else
            {
                throwError("expression or rank specifier ','");
            }
        }

        /*rank-specifier-list: 
	        | rank-specifier optional-rank-specifier-list */
        private void rank_specifier_list()
        {
            printIfDebug("rank_specifier_list");
            rank_specifier();
            optional_rank_specifier_list();
        }

        /*rank-specifier:
	        | optional-comma-list ']' */
        private void rank_specifier()
        {
            printIfDebug("rank_specifier");
            optional_comma_list();
            if(!pass(TokenType.PUNT_SQUARE_BRACKET_CLOSE))
                throwError("] expected");
            consumeToken();
        }

        /*optional-comma-list:
            | ',' optional-comma-list
            | EPSILON */
        private void optional_comma_list()
        {
            if(pass(TokenType.PUNT_COMMA))
            {
                consumeToken();
                optional_comma_list();
            }else{
                //EPSILON
            }
        }

        /*optional-array-initializer:
            | array-initializer
            | EPSILON */
        private void optional_array_initializer()
        {
            printIfDebug("optional_array_initializer");
            if(pass(TokenType.PUNT_CURLY_BRACKET_OPEN))
            {
                array_initializer();
            }else{
                //EPSILON
            }
        }

        /*optional-rank-specifier-list:
            | '[' rank-specifier-list
            | EPSILON 	 */
        private void optional_rank_specifier_list()
        {
            printIfDebug("optional_rank_specifier_list");
            if(pass(TokenType.PUNT_SQUARE_BRACKET_OPEN))
            {
                consumeToken();
                rank_specifier_list();
            }else{
                //EPSILON
            }
        }
    }
}